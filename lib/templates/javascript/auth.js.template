// lib/auth.js
// This file is generated by the Auth Service CLI.
// It provides helper functions to interact with your authentication backend.

const API_BASE_URL = "<%= apiBaseUrl %>";
const APP_ID = "<%= appId %>";
const API_KEY = "<%= apiKey %>";

/**
 * A helper function to make authenticated API requests.
 * @param {string} endpoint - The API endpoint to call.
 * @param {object} options - The options for the fetch request.
 * @returns {Promise<any>} - The JSON response from the API.
 */
async function fetchFromApi(endpoint, options = {}) {
  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `ApiKey ${API_KEY}`,
    ...options.headers,
  };

  const response = await fetch(`${API_BASE_URL}${endpoint}`, { ...options, headers });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || `Request failed with status ${response.status}`);
  }

  return response.json();
}

// --- Credentials Authentication ---

/**
 * Signs up a new user with their email and password.
 * @param {string} email - The user's email address.
 * @param {string} password - The user's password.
 * @returns {Promise<{token: string}>} - An object containing the JWT.
 */
export async function signUpWithCredentials(email, password) {
  return fetchFromApi(`/auth/credentials/signup/${APP_ID}`, {
    method: 'POST',
    body: JSON.stringify({ email, password }),
  });
}

/**
 * Signs in a user with their email and password.
 * @param {string} email - The user's email address.
 * @param {string} password - The user's password.
 * @returns {Promise<{token: string}>} - An object containing the JWT.
 */
export async function signInWithCredentials(email, password) {
  return fetchFromApi(`/auth/credentials/signin/${APP_ID}`, {
    method: 'POST',
    body: JSON.stringify({ email, password }),
  });
}

// --- OAuth Authentication ---

/**
 * Initiates the OAuth sign-in flow for a given provider (e.g., 'github', 'google').
 * This function fetches the redirect URL from your backend and redirects the user's browser.
 * @param {string} provider - The OAuth provider ('github', 'google', etc.).
 */
export async function signInWithOAuth(provider) {
  try {
    const response = await fetchFromApi(`/auth/${provider.toLowerCase()}/${APP_ID}`);
    const { redirect_url } = response;
    if (redirect_url) {
      window.location.href = redirect_url;
    } else {
      throw new Error('Redirect URL not found in response.');
    }
  } catch (error) {
    console.error(`OAuth sign-in failed for provider ${provider}:`, error);
    throw error;
  }
}

/**
 * Handles the OAuth callback by extracting the JWT from the URL query parameters.
 * This function should be called on the page that you configured as your redirect_uri.
 * @returns {string|null} - The JWT token if found, otherwise null.
 */
export function handleOAuthCallback() {
  const params = new URLSearchParams(window.location.search);
  const token = params.get('token');
  // TODO: Once the token is retrieved, you should store it securely
  // (e.g., in an HttpOnly cookie) and remove it from the URL.
  if (token) {
    // Example: remove token from URL for cleanliness
    window.history.replaceState({}, document.title, window.location.pathname);
  }
  return token;
}

// --- Magic Link Authentication ---

/**
 * Sends a magic sign-in link to the user's email.
 * @param {string} email - The user's email address.
 * @returns {Promise<{success: boolean}>} - A success message.
 */
export async function sendMagicLink(email) {
  return fetchFromApi(`/auth/magic-link/${APP_ID}`, {
    method: 'POST',
    body: JSON.stringify({ email }),
  });
}

/**
 * Verifies a magic link token from the URL and returns the final JWT.
 * This should be called on the page the user lands on after clicking the link in their email.
 * @returns {Promise<{token: string}>} - An object containing the JWT.
 */
export async function verifyMagicLink() {
  const params = new URLSearchParams(window.location.search);
  const verificationToken = params.get('token');

  if (!verificationToken) {
    throw new Error('Verification token not found in URL.');
  }

  const response = await fetch(`${API_BASE_URL}/auth/verify/${APP_ID}?token=${verificationToken}`);
  
  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.error || 'Magic link verification failed.');
  }
  
  // TODO: Store the token securely.
  return response.json();
}